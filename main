import requests
from lxml import html

from sparkai.llm.llm import ChatSparkLLM, ChunkPrintHandler
from sparkai.core.messages import ChatMessage

def loudongleixing(p):
    SPARKAI_URL = 'wss://spark-api.xf-yun.com/v4.0/chat'
    SPARKAI_APP_ID = ''
    SPARKAI_API_SECRET = ''
    SPARKAI_API_KEY = ''
    SPARKAI_DOMAIN = '4.0Ultra'
    spark = ChatSparkLLM(
        spark_api_url=SPARKAI_URL,
        spark_app_id=SPARKAI_APP_ID,
        spark_api_key=SPARKAI_API_KEY,
        spark_api_secret=SPARKAI_API_SECRET,
        spark_llm_domain=SPARKAI_DOMAIN,
        streaming=False,
    )
    messages = [ChatMessage(
        role="user",
        content=f'{p}，上面是漏洞描述，根据以下分类中帮我选择最正确的一种:操作系统漏洞、框架漏洞、网络设备漏洞、应用软件漏洞，中间件漏洞，其它漏洞。只需要回答选择的并（）框住，不要回答其它'
    )]
    handler = ChunkPrintHandler()
    a = str(spark.generate([messages], callbacks=[handler]))
    try:
        s = a.split("(text='（")[1].split("）'")[0]
        return s
        try:
            return a.split("(text='")[1].split("）'")[0]
        except:
            pass
    except:
        return a
def extract_info_from_url(url, query):
    # 定义请求头
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Connection': 'keep-alive'
    }

    params = {'q': query}

    try:
        response = requests.get(url, params=params, headers=headers)
        response.raise_for_status()

        tree = html.fromstring(response.content)

        hrefs = tree.xpath('/html/body/main/div[2]/div/div[2]/table/tbody/tr/td[1]/a/@href')

        if not hrefs:
            print("没找到，丸辣！全丸辣！自己去搜吧")
            return

        link_url = "https://avd.aliyun.com" + hrefs[0]

        print(f"版本相关 URL: {link_url}")

        response = requests.get(link_url, headers=headers)
        response.raise_for_status()

        tree = html.fromstring(response.content)

        info = tree.xpath('/html/body/div[3]/div/div[1]/div[2]/div[1]/div/text()')

        if not info:
            print("未找到指定的信息。")
        else:
            print("漏洞类型:",end='')

            print(loudongleixing(info[0].strip()))

    except requests.exceptions.RequestException as e:
        print(f"请求失败: {e}")


if __name__ == "__main__":

    print("by riping")
    url = "https://avd.aliyun.com/search"
    while True:
        query = input("请输入查询cve（例如 CVE-2023-38949）: ")
        extract_info_from_url(url, query)
